// Code generated by counterfeiter. DO NOT EDIT.
package gmapfakes

import (
	"net/http"
	"sync"

	"github.com/ifreddyrondon/address-resolver/gmap"
)

type FakeAddressClient struct {
	GetGeocodingStub        func(address string) (*http.Response, error)
	getGeocodingMutex       sync.RWMutex
	getGeocodingArgsForCall []struct {
		address string
	}
	getGeocodingReturns struct {
		result1 *http.Response
		result2 error
	}
	getGeocodingReturnsOnCall map[int]struct {
		result1 *http.Response
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAddressClient) GetGeocoding(address string) (*http.Response, error) {
	fake.getGeocodingMutex.Lock()
	ret, specificReturn := fake.getGeocodingReturnsOnCall[len(fake.getGeocodingArgsForCall)]
	fake.getGeocodingArgsForCall = append(fake.getGeocodingArgsForCall, struct {
		address string
	}{address})
	fake.recordInvocation("GetGeocoding", []interface{}{address})
	fake.getGeocodingMutex.Unlock()
	if fake.GetGeocodingStub != nil {
		return fake.GetGeocodingStub(address)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getGeocodingReturns.result1, fake.getGeocodingReturns.result2
}

func (fake *FakeAddressClient) GetGeocodingCallCount() int {
	fake.getGeocodingMutex.RLock()
	defer fake.getGeocodingMutex.RUnlock()
	return len(fake.getGeocodingArgsForCall)
}

func (fake *FakeAddressClient) GetGeocodingArgsForCall(i int) string {
	fake.getGeocodingMutex.RLock()
	defer fake.getGeocodingMutex.RUnlock()
	return fake.getGeocodingArgsForCall[i].address
}

func (fake *FakeAddressClient) GetGeocodingReturns(result1 *http.Response, result2 error) {
	fake.GetGeocodingStub = nil
	fake.getGeocodingReturns = struct {
		result1 *http.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeAddressClient) GetGeocodingReturnsOnCall(i int, result1 *http.Response, result2 error) {
	fake.GetGeocodingStub = nil
	if fake.getGeocodingReturnsOnCall == nil {
		fake.getGeocodingReturnsOnCall = make(map[int]struct {
			result1 *http.Response
			result2 error
		})
	}
	fake.getGeocodingReturnsOnCall[i] = struct {
		result1 *http.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeAddressClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getGeocodingMutex.RLock()
	defer fake.getGeocodingMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAddressClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gmap.AddressClient = new(FakeAddressClient)
